<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <bytecodeTargetLevel target="8" />
  </component>
  <component name="JUnitGeneratorProjectSettings">
    <option name="selectedTemplateKey" value="JUnit 4" />
    <option name="vmTemplates">
      <map>
        <entry key="JUnit 3" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package $entry.packageName; &#10;&#10;import lombok.extern.java.Log;&#10;import org.junit.jupiter.api.AfterEach;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.runner.RunWith;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.test.context.junit4.SpringRunner;&#10;import org.springframework.transaction.annotation.Transactional;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.mock.web.MockHttpServletResponse;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.MvcResult;&#10;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;&#10;import org.springframework.test.web.servlet.result.MockMvcResultHandlers;&#10;import org.springframework.test.web.servlet.result.MockMvcResultMatchers;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$today&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;@Log&#10;@Transactional&#10;@RunWith(SpringRunner.class)&#10;@SpringBootTest&#10;@WebAppConfiguration&#10;public class $testClass { &#10;&#10;private ${entry.ClassName} testController;&#10;&#10;private MockMvc mockMvc;&#10;&#10;@BeforeEach&#10;public void before(){ &#10;mockMvc = MockMvcBuilders.standaloneSetup(testController).build();&#10;log.info(&quot;start junit test&quot;);&#10;} &#10;&#10;@AfterEach&#10;public void after(){ &#10;log.info(&quot;end junit test&quot;);&#10;} &#10;&#10;&#10;/*&#10;        public void  demo (){&#10;        MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders.post(&quot;/controler/$method&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .characterEncoding(&quot;UTF-8&quot;)&#10;                .content(JSON.toJSONString(vo)))&#10;                .andExpect(MockMvcResultMatchers.status().isOk())&#10;                .andDo(MockMvcResultHandlers.print())&#10;                .andReturn();&#10;        MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders.get(&quot;/controler/$method&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .characterEncoding(&quot;UTF-8&quot;)&#10;                .param(&quot;id&quot;,&quot;1&quot;))&#10;                .andExpect(MockMvcResultMatchers.status().isOk())&#10;                .andDo(MockMvcResultHandlers.print())&#10;                .andReturn();&#10;        MockHttpServletResponse response =mvcResult.getResponse();&#10;        response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);&#10;        try {&#10;            log.info(response.getContentAsString());&#10;        } catch (UnsupportedEncodingException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }*/&#10;&#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;@Test&#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;@Test&#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;} &#10;#end" />
        <entry key="JUnit 4" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package $entry.packageName; &#10;&#10;import org.aspectj.lang.annotation.After;&#10;import org.aspectj.lang.annotation.Before;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.runner.RunWith;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.test.context.junit4.SpringRunner;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$date&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;@Transactional&#10;@RunWith(SpringRunner.class)&#10;@SpringBootTest&#10;public class $testClass { &#10;&#10;@Before(&quot;&quot;)&#10;public void before() throws Exception { &#10;} &#10;&#10;@After(&quot;&quot;)&#10;public void after() throws Exception { &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;@Test&#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;@Test&#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;} &#10;#end" />
      </map>
    </option>
  </component>
  <component name="MavenImportPreferences">
    <option name="generalSettings">
      <MavenGeneralSettings>
        <option name="alwaysUpdateSnapshots" value="true" />
        <option name="localRepository" value="D:\dev\repository" />
        <option name="mavenHome" value="D:/dev/maven/apache-maven-3.5.4" />
        <option name="userSettingsFile" value="D:\dev\maven\apache-maven-3.5.4\conf\settings.xml" />
      </MavenGeneralSettings>
    </option>
  </component>
  <component name="MavenRunner">
    <option name="jreName" value="1.8" />
    <option name="vmOptions" value="-DarchetypeCatalog=internal" />
  </component>
  <component name="ProjectRootManager" version="2" project-jdk-name="C:\ProgramData\Anaconda3" project-jdk-type="Python SDK" />
</project>